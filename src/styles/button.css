.decorative-hex {
    aspect-ratio: 27/31;
    font-size: 100%;
    height: auto;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    @apply hex-frame;
}

.hex-frame::after {
    position: absolute;
    top: 0;
    left: 0;
    content: "";
    width: 100%;
    height: 100%;
    background-color: var(--silver);
    clip-path: polygon(
            50% 0,
            100% 25%,
            100% 75%,
            50% 100%,
            0 75%,
            0 25%,
            50% 0,
            50% 2px,
            2px calc(25% + 1px),
            2px calc(75% - 1px),
            50% calc(100% - 2px),
            calc(100% - 2px) calc(75% - 1px),
            calc(100% - 2px) calc(25% + 1px),
            50% 2px
    );
}

.decorative-hex i {
    color: goldenrod;
}

.icon-btn:hover i {
    filter: drop-shadow(0 0 2px goldenrod);
    animation: pulse 1.5s ease-in-out infinite;
}

.deactivated.icon-btn:hover i {
    filter: drop-shadow(0 0 2px black);
    animation: pulse 1.5s ease-in-out infinite;
}

.icon-btn i {
    display: block;
    width: fit-content;
}

.remove i {
    color: orangered;
}

.btn-text {
    color: goldenrod;
}

.deactivated i {
    color: dimgrey !important;
}

.cancel {
    position: absolute;
    z-index: 1;
    width: 20px;
    height: 20px;
    top: 8px;
    right: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
}

@keyframes shade-bg {
    from {
        background-image: linear-gradient(to right, rgba(0, 0, 0, 0.1), transparent 20%, transparent 80%, rgba(0, 0, 0, 0.1));
    }
    to {
        background-image: linear-gradient(to right, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1) );
    }
}

.framed-button:hover span {
    background-color: rgba(0, 0, 0, 0.1);
}

button:active {
    transform: scale(0.99);
    filter: brightness(1.2);
}

.framed-button:hover label {
    filter: drop-shadow(0 0 4px goldenrod);
}

.framed-button:hover label.red-text {
    filter: drop-shadow(0 0 4px crimson);
}

.framed-button:hover .inner-frame-container div {
    animation: connect-borders 0.4s ease forwards;
}

@keyframes connect-borders {
    from {
        width: 30px;
    }
    to {
        width: 104px;
    }
}

@keyframes disconnect-borders {
    from {
        width: 104px;
    }
    to {
        width: 30px;
    }
}

.loading::before {
    animation: loading 1s ease 0.5s infinite;
}

/* HTML: <div class="loader"></div> */

.loader {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    border: 3px solid var(--silver);
    clip-path: polygon(0 100%, 50% 50%, 100% 100%, 100% 0, 0 0);
    animation: rotate 1s linear infinite;
}

@keyframes rotate {
    0% {
        rotate: 0deg;
    }
    25% {
        rotate: 90deg;
    }
    50% {
        rotate: 180deg;
    }
    75% {
        rotate: 270deg;
    }
    100% {
        rotate: 360deg;
    }
}